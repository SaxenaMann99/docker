Volumes;
    - Docker Volumes
    - Bind mounts

Docker volumes

- Docker volumes are managed by Docker and stored within the Docker environment, outside of the container's filesystem.
- They are specifically designed to persist data generated by and used by Docker containers.
- Volumes can be named and can be easily managed using Docker CLI commands.
- Docker volumes are typically preferred for production environments due to their ease of use, portability, and better performance.
- They are isolated from the container's filesystem, which provides additional security and flexibility.
- Docker volumes can be shared among multiple containers, making them suitable for scenarios where multiple containers need access 
  to the same data.
- Volumes can be created explicitly using docker volume create command or implicitly when specified in a container's configuration.

Bind Mounts; 

- Bind mounts, on the other hand, are used to link a directory on the host machine to a directory within a Docker container.
- They allow you to directly mount a directory from the host file system into the container.
- With bind mounts, changes made in the container are immediately reflected on the host and vice versa, as they share the same filesystem.
- Bind mounts offer more control and flexibility as they give direct access to the host's filesystem.
- They are often used during development or testing phases where developers need to access files on the host machine within the container 
  or vice versa.
- Unlike volumes, bind mounts are not managed by Docker; they are simply paths on the host system.

In summary, Docker volumes are managed by Docker itself and provide an abstraction for managing persistent data, whereas bind mounts 
directly link directories between the host and container filesystems, offering more control and flexibility but less abstraction and 
portability.

Examples; 

1. Docker Volumes:
    - Let's say you have a Dockerized web application that generates log files. 
    - You want to ensure that these log files persist even if the container is stopped or removed. 
    - You can use a Docker volume to achieve this.
    - First, create a Docker volume named app_logs:
        $ docker volume create app_logs  
    - Then, run your container with the volume mounted to a directory within the container where the logs are stored:
        $ docker run -d -v app_logs:/app/logs your_web_app_image
    - Now, the log files generated by your web application will be stored in the app_logs volume. 
    - Even if the container is stopped or removed, the log files will persist in the volume.

2. Bind Mounts:

    - Suppose you have a local directory containing configuration files that your Dockerized database server needs to access. 
    - You want to mount this directory into the Docker container so that the database server can read the configuration files.
    - Assuming your configuration files are located at /path/to/config, you can use a bind mount to mount this directory into the 
      container:
        $ docker run -d -v /path/to/config:/container/config your_database_image
    - Now, the /path/to/config directory on your host machine is mounted as /container/config within the Docker container. 
    -  Any changes made to the configuration files on the host machine will be immediately reflected inside the container, and vice versa.


Important commands; 

Creating a Volume                     : docker volume create <volume_name>
Listing Volumes                       : docker volume ls
Inspecting a Volume                   : docker volume inspect <volume_name>
Mounting a Volume in a Container      : docker run -v <volume_name>:<container_path> <image_name> or docker run --mount source=<volume_name>,target=<container_path> <image_name>
Mounting a Host Directory as a Volume : docker run -v <host_path>:<container_path> <image_name> or docker run --mount type=bind,source=<host_path>,target=<container_path> <image_name>
Removing a Volume                     : docker volume rm <volume_name>
Pruning Unused Volumes                : docker volume prune
